# -*- coding: utf-8 -*-
"""Fabrica_Projeto_V.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qzvVTZOuXZEas8da3jCyPUwT7MVFcAwH

#Imports
"""

import numpy as np
import pandas as pd
import re
import datetime

"""##Qual é o datetype da coluna?"""

def escolher_funcao(coluna):
    if coluna.dtypes == 'datetime64[ns]':
        # Chama a função de tratamento de dados do tipo date
        return tratar_dados_date(coluna)

    elif coluna.dtypes == 'object':
        # Chama a função de tratamento de dados do tipo string
        return tratar_dados_string(coluna)

    elif np.issubdtype(coluna.dtypes, np.number):
        # Chama a função de tratamento de dados do tipo numerico
        return tratar_dados_numerico(coluna)
    else:
        # Caso o tipo de dado não seja reconhecido, retorna a coluna original
        return coluna

def tratar_dados_date(coluna): 
    for fmt in ('%d-%m-%Y',
                '%d-%m-%y',
                '%d-%B-%Y',
                '%d-%B-%y',
                '%d-%b-%Y',
                '%d-%b-%y',

                '%d/%m/%Y',
                '%d/%m/%y',
                '%d/%B/%Y',
                '%d/%B/%y',
                '%d/%b/%Y',
                '%d/%b/%y',

                '%Y-%m-%d',
                '%Y-%B-%d',
                '%Y-%b-%d',
                '%y-%m-%d',
                '%y-%B-%d',
                '%y-%b-%d',

                '%Y/%m/%d',
                '%Y/%B/%d',
                '%Y/%b/%d',
                '%y/%m/%d',
                '%y/%B/%d',
                '%y/%b/%d',

                '%d de %B de %Y',
                '%d de %b de %Y',
                '%d de %B de %y',
                '%d de %b de %y',
                '%d de %m de %y',

                '%B %d, %Y',
                '%d %B %Y',
                '%d %b %Y',
                '%d %m %Y',
                '%d %B %y',
                '%d %b %y',
                '%d %m %y'):
        try:
            return datetime.datetime.strptime(coluna, fmt)
        except ValueError:
            pass
    raise ValueError('Data não está em nenhum dos formatos esperados.')


def tratar_dados_string(coluna):
    coluna_limpa = re.sub(r'[^a-zA-Z\s]', '', coluna)

    # Remover espaços em branco à esquerda e à direita da string
    coluna_limpa = coluna_limpa.strip()
    
    return coluna_limpa


def tratar_dados_numerico(coluna):
    # Implemente aqui a lógica de tratamento de dados do tipo numerico
    return coluna

"""#Tratamento de variaveis

##String
"""

# Substituir todos os caracteres que não são letras ou espaços em branco por uma string vazia

def limpar_coluna(coluna):
    coluna_limpa = re.sub(r'[^a-zA-Z\s]', '', coluna)

    # Remover espaços em branco à esquerda e à direita da string
    coluna_limpa = coluna_limpa.strip()
    
    return coluna_limpa

# Criar DataFrame de exemplo
df = pd.DataFrame({'coluna': ['abc123', 'abc 123', 'abc!@# 123', '   abc123']})

# Aplicar a função na coluna do DataFrame
df['coluna'] = df['coluna'].apply(limpar_coluna)

# Imprimir o resultado
print(df)

"""##Data --> para Datetime """

def tratar_coluna_data(data_str):

    filtro_data = re.compile(r'^[0-9]{4}\-[0-9]{2}\-[0-9]{2}')

    if not isinstance(data_str, (str)):
      data_str = str(data_str)
    data_str = data_str.strip()

    filtro = filtro_data.search(data_str)
    if filtro:
      return filtro

    for fmt in ('%d-%m-%Y',
                '%d-%m-%y',
                '%d-%B-%Y',
                '%d-%B-%y',
                '%d-%b-%Y',
                '%d-%b-%y',

                '%d/%m/%Y',
                '%d/%m/%y',
                '%d/%B/%Y',
                '%d/%B/%y',
                '%d/%b/%Y',
                '%d/%b/%y',

                '%Y-%m-%d',
                '%Y-%B-%d',
                '%Y-%b-%d',
                '%y-%m-%d',
                '%y-%B-%d',
                '%y-%b-%d',

                '%Y/%m/%d',
                '%Y/%B/%d',
                '%Y/%b/%d',
                '%y/%m/%d',
                '%y/%B/%d',
                '%y/%b/%d',

                '%d de %B de %Y',
                '%d de %b de %Y',
                '%d de %B de %y',
                '%d de %b de %y',
                '%d de %m de %y',

                '%B %d, %Y',
                '%d %B %Y',
                '%d %b %Y',
                '%d %m %Y',
                '%d %B %y',
                '%d %b %y',
                '%d %m %y'):
        try:
            return datetime.datetime.strptime(data_str, fmt)
        except ValueError:
            pass
    raise ValueError('Data não está em nenhum dos formatos esperados.')

#só não faz tratamento de mes de portugues, a data tem estar em ingles.

data_str = '1 1 2001'
data = tratar_coluna_data(data_str)
print(data)

"""##Tipos numéricos — int, float"""

import re
import statistics

def tratar_coluna(coluna):
    resultado = []
    numeros_validos = []

    padrao = r'^[-+]?\d*\.?\d+$'  # padrão de regex para números inteiros e float

    for valor in coluna:
        if re.match(padrao, str(valor)):
            numeros_validos.append(float(valor))

    mediana = statistics.median(numeros_validos) if numeros_validos else None

    for valor in coluna:
        if re.match(padrao, str(valor)):
            resultado.append(float(valor))
        else:
            resultado.append(mediana)

    return resultado

coluna = [1, 2.5, '3', '4.2', 'abc', 5.7]
coluna_tratada = tratar_coluna(coluna)
print(coluna_tratada)