# -*- coding: utf-8 -*-
"""Modelos_FAB5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tdZTImS5PktBt0dlS00zmvjTPcpw2xxp
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""###Simple Linear Regression"""

def simple_linear_regression(x, y):
    # criar um objeto de regressão linear
    model = LinearRegression()


    # ajustar o modelo aos dados
    x = x.reshape(-1, 1)
    model.fit(x, y)


    # calcular a previsão do modelo
    y_pred = model.predict(x)


    # calcular as métricas
    mse = mean_squared_error(y, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y, y_pred)


    # plotar o gráfico de dispersão e a linha de regressão
    plt.scatter(x, y)
    plt.plot(x, y_pred, color='red')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('Regressão Linear Simples')
    plt.show()

    # retornar o coeficiente angular e o coeficiente linear
    return model.coef_[0], model.intercept_, mse, rmse, r2


# exemplo de uso
x = np.array([1, 2, 3, 4, 5])
y = np.array([2, 3, 5, 6, 8])


slope, intercept, mse, rmse, r2 = simple_linear_regression(x, y)
print('MSE:', mse)
print('RMSE:', rmse)
print('R²:', r2)
print('Coeficiente Angular:', slope)
print('Coeficiente Linear:', intercept)

"""###Mult Linear Regression"""

def multiple_linear_regression(x, y):
    # criar um objeto de regressão linear
    model = LinearRegression()

    # ajustar o modelo aos dados
    model.fit(x, y)

    # calcular a previsão do modelo
    y_pred = model.predict(x)

    # calcular as métricas
    mae = mean_absolute_error(y, y_pred)
    mse = mean_squared_error(y, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y, y_pred)

    # retornar as métricas
    return mae, mse, rmse, r2

# exemplo de uso
x = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]])
y = np.array([3, 5, 7, 9, 11])

mae, mse, rmse, r2 = multiple_linear_regression(x, y)
print('MAE:', mae)
print('MSE:', mse)
print('RMSE:', rmse)
print('R²:', r2)

# plotar gráfico de barras das métricas
metrics = ['MAE', 'MSE', 'RMSE', 'R²']
values = [mae, mse, rmse, r2]
plt.bar(metrics, values)
plt.title('Métricas de Regressão Linear Múltipla')
plt.xlabel('Métricas')
plt.ylabel('Valores')
plt.show()



